<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>dnsldprp</title>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>AWS Lambda - S3 PreSignedURL 사용해서 파일 업로드</title>
        <description>&lt;hr /&gt;
&lt;h4 id=&quot;presignedurl-&quot;&gt;PreSignedURL ??&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;클라이언트 -&amp;gt; 서버로 이미지를 업로드할 수 있는 URL을 요청&lt;/li&gt;
  &lt;li&gt;서버는 URL 생성 후 클라이언트에 전달&lt;/li&gt;
  &lt;li&gt;클라이언트에서 이미지 저장소로 바로 업로드&lt;/li&gt;
  &lt;li&gt;서버쪽에 이미지 왔다갔다하는 부하를 줄일 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;로컬에서-테스트&quot;&gt;로컬에서 테스트&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;aws cli configure&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pip install boto3
# pip install awscli
# aws configure
AWS Access Key ID [None]:
AWS Secret Access Key [None]:
Default region name [None]:
Default output format [None]:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;aws IAM console 접속 -&amp;gt; 사용자 생성 -&amp;gt; 권한에 AmazonS3FullAccess 추가후 키 확인해서 넣어주면 됨
Default region은 한국 리전일 경우 ap-northeast-2&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;s3 버킷 조회&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3
from botocore.exceptions import ClientError

def getBuckets():
    s3 = boto3.client('s3')
    response = s3.list_buckets()

    print('Existing buckets:')
    for bucket in response['Buckets']:
        print(f'  {bucket[&quot;Name&quot;]}')

if __name__ == '__main__':
    getBuckets()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;upload 용 PreSignedURL 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def create_presigned_post():
    
    bucket_name='yourbuckname'
    object_name='overlay.png' # 생성될 object name
    fileds={&quot;acl&quot;: &quot;public-read&quot;, &quot;Content-Type&quot;: 'png'}
    conditions=[
        {&quot;acl&quot;:&quot;public-read&quot;},
        {&quot;Content-Type&quot;:&quot;png&quot;}
    ]
    expiration=3600
   
    # Generate a presigned S3 POST URL
    s3_client = boto3.client('s3')
    try:
        response = s3_client.generate_presigned_post(bucket_name,
                                                     object_name,
                                                     fileds,
                                                     conditions,
                                                     expiration)
    except ClientError as e:
        logging.error(e)
        return None

    # The response contains the presigned URL and required fields
    print(response)
    return response

if __name__ == '__main__':
    create_presigned_post()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;response 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
'url': 'https://yourbucket.s3.amazonaws.com/', 
'fields': 
{'key': 'object_name', 
'x-amz-algorithm': 'AWS4-HMAC-SHA256', 
'x-amz-credential': '', 
'x-amz-date': '', 
'policy': '', 
'x-amz-signature': ''
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;url에 아래 field들을 body로 multipart 요청 보내면 된다&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;postman 예시&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman_local.JPG&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;aws-lambda-python36-에서-사용&quot;&gt;AWS Lambda (Python3.6) 에서 사용&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Lambda의 IAM 역할에 AmazonS3FullAccess 추가&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lambda 함수 작성&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import json
import boto3

def lambda_handler(event, context):
    
    bucket_name='yourbuckname'
    object_name=event['object_name'] # parameter
    fileds={&quot;acl&quot;: &quot;public-read&quot;, &quot;Content-Type&quot;: 'png'}
    conditions=[
        {&quot;acl&quot;:&quot;public-read&quot;},
        {&quot;Content-Type&quot;:&quot;png&quot;}
    ]
    expiration=3600
   
    # Generate a presigned S3 POST URL
    s3_client = boto3.client('s3')
    try:
        response = s3_client.generate_presigned_post(bucket_name,
                                                     object_name,
                                                     fileds,
                                                     conditions,
                                                     expiration)
    except ClientError as e:
        logging.error(e)
        return None

    # The response contains the presigned URL and required fields
    #print(response)
    return response
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;테스트 이벤트 구성 후 테스트했을 때 response&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;url&quot;: &quot;https://yourbucket.s3.amazonaws.com/&quot;,
  &quot;fields&quot;: {
    &quot;acl&quot;: &quot;public-read&quot;,
    &quot;Content-Type&quot;: &quot;png&quot;,
    &quot;key&quot;: &quot;object_name&quot;,
    &quot;x-amz-algorithm&quot;: &quot;AWS4-HMAC-SHA256&quot;,
    &quot;x-amz-credential&quot;: &quot;&quot;,
    &quot;x-amz-date&quot;: &quot;&quot;,
    &quot;x-amz-security-token&quot;: &quot;&quot;,
    &quot;policy&quot;: &quot;&quot;,
    &quot;x-amz-signature&quot;: &quot;&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로컬에서 했을때와 파라미터는 다르지만 똑같이 field를 body로 mulitpart 전송하면됨&lt;/p&gt;

&lt;p&gt;외부에서 접속가능한 URL은 https://yourbucket.s3.amazonaws.com/object_name&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2019-11-09/aws-s3-use-presignedurl/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-11-09/aws-s3-use-presignedurl/</guid>
      </item>
    
      <item>
        <title>GraphQL http request 기본 </title>
        <description>&lt;h4 id=&quot;graphql-&quot;&gt;GraphQL ?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;단일 엔드포인트로 백엔드 부담이 줄어듬, serverless와 잘 어울리는듯함&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphql-kr.github.io/learn/&quot;&gt;공식 가이드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;schema&quot;&gt;Schema&lt;/h4&gt;
&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type User {
	id: ID!
	name: String
}

type Query {
	getUser(id: ID!): User
}

type Mutation {
	createUser(input: CreateUserInput!): User
}

input CreateUserInput {
	name: String
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;뮤테이션은 데이터 조작이 일어날 때 사용, resolver를 등록해서 원하는 행동을 할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;get---id를-이용한-유저-조회&quot;&gt;GET - ID를 이용한 유저 조회&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;endpoint : https://my-url/graphql
param
  query : {getUser(id:&quot;ca02ab35-b8e6-438a-9d7f-456b12ff46d6&quot;){name}}

url : https://my-url/graphql?query={getUser(id:&quot;ca02ab35-b8e6-438a-9d7f-456b12ff46d6&quot;){name}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;graphql-query&quot;&gt;graphql query&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  getUser(id:&quot;ca02ab35-b8e6-438a-9d7f-456b12ff46d6&quot;)
  {
    name
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;response&quot;&gt;response&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;data&quot;: {
        &quot;getMyModelType&quot;: {
            &quot;name&quot;: &quot;Hello, world!&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;post---유저-생성&quot;&gt;POST - 유저 생성&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;endpoint : https://my-url/graphql
header : {Content-Type:application/json}
body : 
{
	&quot;query&quot;:&quot;mutation myMutation ($user:CreateUserInput!) { createUser(input:$user) { id name }}&quot;,
	&quot;variables&quot;:{
		&quot;user&quot;:{
			&quot;name&quot;:&quot;dnsldprp&quot;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;body 에 query에는 graphql query string을, variables에는 query variables 입력&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;graphql-query-1&quot;&gt;graphql query&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mutation myMutation($user:CreateUserInput!){
  createUser(input:$user){
    id
    name
  }
}

Query variables
{
  &quot;user&quot;: {
    &quot;title&quot;: &quot;Hello, world!!!!&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;response-1&quot;&gt;response&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;data&quot;: {
        &quot;createUser&quot;: {
            &quot;id&quot;: &quot;7ac55b71-2c17-4a6b-8c2f-18fd5a90e166&quot;,
            &quot;title&quot;: &quot;Hello, world!!!!&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2019-11-07/graphql-with-http/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-11-07/graphql-with-http/</guid>
      </item>
    
      <item>
        <title>Ansible AWX에서 third-party credential storage 사용하는법</title>
        <description>&lt;h3 id=&quot;ansible-lookup-plugin-활용해-동시에-여러-서버의-암호-가져와-실행시킬-수-있다&quot;&gt;ansible lookup plugin 활용해 동시에 여러 서버의 암호 가져와 실행시킬 수 있다&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;vault-서버-구성해-서버별-id-password-저장&quot;&gt;vault 서버 구성해 서버별 ID, password 저장&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;docker 사용시 awx_web, awx_task container 내부에 hvac 패키지 설치 해야 함&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;ansible-awx-inventory탭의-extra-variables에-다음과-같이-플러그인-사용&quot;&gt;ansible awx inventory탭의 extra variables에 다음과 같이 플러그인 사용&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
ansible_user : {{ lookup('hashi_vault', secret=secret/{{ inventory_hostname }}:username)}}
ansible_ssh_pass : {{ lookup('hashi_vault', secret=secret/{{ inventory_hostname }}:password)}} 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;ansible_hostname&lt;/strong&gt; : ansible fact 수집할 때 서버의 호스트네임 읽어온 값&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;inventory_hostname&lt;/strong&gt; : inventory에 써있는 호스트 네임 값 ( container의 /etc/hosts 에 host 등록하면 IP주소가 아닌 hostname으로 사용가능)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;ansible-awx-credential-탭에-custom-credential-생성&quot;&gt;ansible awx credential 탭에 custom credential 생성&lt;/h4&gt;

&lt;p&gt;Input :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields:
  - type: string
    id: vault_server
    label: URL
  - type: string
    id: vault_token
    label: Token
    secret: true
required:
  - vault_server
  - vault_token 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Injector :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
env:
  VAULT_ADDR: '{{ vault_server }}'
  VAULT_TOKEN: '{{ vault_token }}'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;마지막으로-template-탭에서-inventory-credential-적용-후-스크립트-수행&quot;&gt;마지막으로, template 탭에서 inventory, credential 적용 후 스크립트 수행&lt;/h4&gt;

</description>
        <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2018-08-08/awx-third-party/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-08-08/awx-third-party/</guid>
      </item>
    
      <item>
        <title>pip 패키지 다운 받아서 설치하는법</title>
        <description>&lt;h2 id=&quot;pip-패키지-오프라인으로-인스톨-하는법&quot;&gt;pip 패키지 오프라인으로 인스톨 하는법&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;인터넷이 안되는 환경에서 파이썬 패키지를 활용해야 할때&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;순서&quot;&gt;순서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;온라인 환경에서 OS 버전, 파이썬 버전 고려해서 패키지 다운로드
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install some-packages 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;설치된 패키지 목록 저장
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip freeze &amp;gt; packages.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;필요없는 패키지들은 삭제 하면 됨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;패키지 파일 다운로드
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip download -r ./packages.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;파일 압축
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -zcvf packages.tar.gz ./*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;설치할 곳으로 압축파일 옮긴 후 압축 풀기
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -zxvf package.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;설치
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install --no-index --find-links=&quot;./&quot; -r ./packages.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;패키지들 설치하는 과정에서 알 수 없는 에러 발생하면 에러 패키지를 제외하고 하나씩 설치&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install --no-index --find-links=&quot;./&quot; --no-dependencies requests-2.19.1-py2.py3-none-any.whl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2018-08-08/pip-offline-install/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-08-08/pip-offline-install/</guid>
      </item>
    
      <item>
        <title>도커 이미지 오프라인 전송</title>
        <description>&lt;h2 id=&quot;오프라인-환경이라-도커-이미지를-가져오기-힘들때&quot;&gt;오프라인 환경이라 도커 이미지를 가져오기 힘들때&lt;/h2&gt;
&lt;p&gt;이미지를 압축 파일 형태로 저장하고 전송 후 불러올 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;순서&quot;&gt;순서&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;도커 이미지 확인
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;압축 파일로 이미지 저장
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker save [IMAGE ID] | gzip &amp;gt; [파일명].tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;오프라인 환경으로 파일 전송 후 이미지 불러오기
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zcat [파일명].tar.gz | docker load
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2018-08-08/dockerimage-offline-transfer/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-08-08/dockerimage-offline-transfer/</guid>
      </item>
    
      <item>
        <title>github 마크다운 사용 방법</title>
        <description>&lt;h2 id=&quot;title&quot;&gt;Title&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;으로 시작, &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;은 1개 ~ 6개까지 쓸 수 있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;의 갯수에 따라 글씨크기가 작아진다.&lt;/p&gt;

&lt;p&gt;(`로 텍스트를 감싸면 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;처럼 인라인 코드블럭이 된다.)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;code-block&quot;&gt;Code block&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~~~&lt;/code&gt;로 블럭을 감싸면 된다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function execute(){
    print(&quot;function&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bold&quot;&gt;bold&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt;로 텍스트를 감싸면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;굵게&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;hr&quot;&gt;hr&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;***&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;blockquote&quot;&gt;BlockQuote&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;를 문장 앞에 쓰면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HAPPY!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;link&quot;&gt;Link&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[링크](https://dnsldprp.github.io) &quot;링크 제목&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtube.com&quot;&gt;Youtube&lt;/a&gt; “유튜브”&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;list&quot;&gt;List&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;No.&lt;/code&gt;  숫자다음 . 찍으면 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 순서 없는 리스트&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A&lt;/li&gt;
  &lt;li&gt;B&lt;/li&gt;
  &lt;li&gt;C&lt;/li&gt;
  &lt;li&gt;D&lt;/li&gt;
  &lt;li&gt;E&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;A&lt;/li&gt;
  &lt;li&gt;B&lt;/li&gt;
  &lt;li&gt;C&lt;/li&gt;
  &lt;li&gt;D&lt;/li&gt;
  &lt;li&gt;E&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;table&quot;&gt;Table&lt;/h2&gt;
&lt;p&gt;No | Name&lt;/p&gt;

&lt;p&gt;——–|——–&lt;/p&gt;

&lt;p&gt;1 | LEE&lt;/p&gt;

&lt;p&gt;2 | MYUNG&lt;/p&gt;

&lt;p&gt;3 | Ho&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;No&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;LEE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;MYUNG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;HO&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2018-05-31/how-to-use/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-05-31/how-to-use/</guid>
      </item>
    
  </channel>
</rss>
